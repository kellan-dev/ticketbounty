generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  email        String   @unique
  username     String   @unique
  passwordHash String

  sessions Session[]
  tickets  Ticket[]
  comments Comment[]

  @@map("ticketbounty_user")
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("ticketbounty_session")
}

model Ticket {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  title     String
  content   String       @db.VarChar(1024)
  status    TicketStatus @default(OPEN)
  deadline  String
  bounty    Int
  userId    String

  comments Comment[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("ticketbounty_ticket")
}

enum TicketStatus {
  OPEN
  CLOSED
  WORKING
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String   @db.VarChar(1024)
  userId    String?
  ticketId  String

  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ticketId])
  @@map("ticketbounty_comment")
}
